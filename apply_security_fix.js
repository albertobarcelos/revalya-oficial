// Script para aplicar corre√ß√£o de seguran√ßa da fun√ß√£o set_tenant_context_flexible
// AIDEV-NOTE: Este script aplica a migra√ß√£o de seguran√ßa e testa a fun√ß√£o corrigida

import { createClient } from '@supabase/supabase-js';
import fs from 'fs';
import path from 'path';

// AIDEV-NOTE: Configura√ß√£o do cliente Supabase
const supabaseUrl = process.env.VITE_SUPABASE_URL || 'http://127.0.0.1:54321';
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY || 'your-anon-key';

const supabase = createClient(supabaseUrl, supabaseKey);

/**
 * AIDEV-NOTE: Fun√ß√£o para aplicar a migra√ß√£o de seguran√ßa
 */
async function applySecurityMigration() {
  console.log('üîß Aplicando migra√ß√£o de seguran√ßa...');
  
  try {
    // Ler o arquivo de migra√ß√£o
    const migrationPath = path.join(process.cwd(), 'supabase', 'migrations', '20250117_fix_set_tenant_context_security.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    // Aplicar a migra√ß√£o (isso normalmente seria feito via Supabase CLI)
    console.log('üìù Migra√ß√£o lida com sucesso. Execute via Supabase CLI:');
    console.log('supabase db push');
    
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao ler migra√ß√£o:', error);
    return false;
  }
}

/**
 * AIDEV-NOTE: Fun√ß√£o para testar a fun√ß√£o corrigida
 */
async function testSecureFunction() {
  console.log('\nüß™ Testando fun√ß√£o set_tenant_context_flexible corrigida...');
  
  try {
    // Teste 1: Par√¢metros inv√°lidos
    console.log('\n1. Testando com par√¢metros nulos...');
    const { data: nullTest, error: nullError } = await supabase.rpc('set_tenant_context_flexible', {
      p_tenant_id: null,
      p_user_id: null
    });
    
    if (nullError) {
      console.log('‚úÖ Fun√ß√£o ainda n√£o foi migrada. Execute: supabase db push');
      return;
    }
    
    console.log('Resultado teste nulo:', nullTest);
    
    // Teste 2: Tenant inexistente
    console.log('\n2. Testando com tenant inexistente...');
    const fakeUUID = '00000000-0000-0000-0000-000000000000';
    const { data: fakeTest, error: fakeError } = await supabase.rpc('set_tenant_context_flexible', {
      p_tenant_id: fakeUUID,
      p_user_id: fakeUUID
    });
    
    console.log('Resultado teste fake:', fakeTest);
    
    // Teste 3: Verificar contexto atual
    console.log('\n3. Testando get_current_tenant_context_safe...');
    const { data: contextTest, error: contextError } = await supabase.rpc('get_current_tenant_context_safe');
    
    if (contextError) {
      console.log('Fun√ß√£o get_current_tenant_context_safe ainda n√£o migrada');
    } else {
      console.log('Contexto atual:', contextTest);
    }
    
  } catch (error) {
    console.error('‚ùå Erro nos testes:', error);
  }
}

/**
 * AIDEV-NOTE: Fun√ß√£o para verificar logs de auditoria
 */
async function checkAuditLogs() {
  console.log('\nüìä Verificando logs de auditoria...');
  
  try {
    const { data: logs, error } = await supabase
      .from('audit_logs')
      .select('*')
      .order('created_at', { ascending: false })
      .limit(10);
    
    if (error) {
      console.log('Tabela audit_logs ainda n√£o criada');
      return;
    }
    
    console.log('√öltimos 10 logs de auditoria:');
    logs.forEach(log => {
      console.log(`- ${log.action}: ${JSON.stringify(log.details)} (${log.created_at})`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar logs:', error);
  }
}

/**
 * AIDEV-NOTE: Fun√ß√£o principal
 */
async function main() {
  console.log('üöÄ Iniciando aplica√ß√£o de corre√ß√£o de seguran√ßa...');
  
  // Aplicar migra√ß√£o
  const migrationApplied = await applySecurityMigration();
  
  if (!migrationApplied) {
    console.log('‚ùå Falha ao aplicar migra√ß√£o');
    return;
  }
  
  // Testar fun√ß√£o
  await testSecureFunction();
  
  // Verificar logs
  await checkAuditLogs();
  
  console.log('\n‚úÖ Processo conclu√≠do!');
  console.log('\nüìã Pr√≥ximos passos:');
  console.log('1. Execute: supabase db push');
  console.log('2. Atualize o frontend para usar a nova resposta JSON');
  console.log('3. Teste o sistema para verificar se o vazamento foi corrigido');
}

// Executar
main().catch(console.error);