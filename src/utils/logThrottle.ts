// AIDEV-NOTE: Utilit√°rio para throttling de logs e evitar spam no console
// Prop√≥sito: Controlar a frequ√™ncia de logs de debug/audit para melhorar performance
// OTIMIZA√á√ÉO: Aumentado throttle para 10s e implementado throttling mais agressivo

interface LogEntry {
  message: string;
  lastLogged: number;
  count: number;
}

class LogThrottle {
  private logs: Map<string, LogEntry> = new Map();
  private readonly throttleTime: number;
  private readonly maxLogsPerMinute: number = 5; // AIDEV-NOTE: M√°ximo 5 logs por minuto por chave

  constructor(throttleTimeMs: number = 10000) { // AIDEV-NOTE: Aumentado para 10 segundos
    this.throttleTime = throttleTimeMs;
  }

  /**
   * Log com throttling - s√≥ executa se passou o tempo m√≠nimo desde o √∫ltimo log
   */
  log(key: string, message: string, ...args: any[]): void {
    const now = Date.now();
    const entry = this.logs.get(key);

    // AIDEV-NOTE: Throttling mais agressivo para logs repetitivos
    if (!entry || (now - entry.lastLogged) >= this.throttleTime) {
      // Se √© a primeira vez ou passou o tempo de throttle
      if (entry && entry.count > 1) {
        // AIDEV-NOTE: S√≥ mostra contagem se for significativa (>10)
        if (entry.count > 10) {
          console.log(`${message} (repetido ${entry.count}x)`, ...args);
        }
      } else {
        console.log(message, ...args);
      }
      
      this.logs.set(key, {
        message,
        lastLogged: now,
        count: 1
      });
    } else {
      // Incrementa contador mas n√£o loga
      entry.count++;
      this.logs.set(key, entry);
    }
  }

  /**
   * Log de audit com throttling espec√≠fico
   */
  audit(key: string, message: string, data?: any): void {
    this.log(`audit_${key}`, `[AUDIT] ${message}`, data);
  }

  /**
   * Log de debug com throttling espec√≠fico
   */
  debug(key: string, message: string, data?: any): void {
    // AIDEV-NOTE: Debug logs t√™m throttling de 30 segundos para reduzir spam
    const now = Date.now();
    const entry = this.logs.get(`debug_${key}`);
    
    if (!entry || (now - entry.lastLogged) >= 30000) { // 30 segundos para debug
      this.log(`debug_${key}`, `[DEBUG] ${message}`, data);
    }
  }

  /**
   * Log de tenant guard com throttling espec√≠fico
   */
  tenantGuard(key: string, message: string, data?: any): void {
    // AIDEV-NOTE: Tenant guard logs t√™m throttling de 60 segundos devido √† alta frequ√™ncia
    const now = Date.now();
    const entry = this.logs.get(`tenant_${key}`);
    
    if (!entry || (now - entry.lastLogged) >= 60000) { // 60 segundos para tenant guard
      this.log(`tenant_${key}`, `[TENANT ACCESS GUARD] üîç ${message}`, data);
    }
  }

  /**
   * Log de auto select com throttling espec√≠fico
   */
  autoSelect(key: string, message: string, data?: any): void {
    this.log(`autoselect_${key}`, `[AUTO SELECT] ${message}`, data);
  }

  /**
   * Limpa logs antigos para evitar vazamento de mem√≥ria
   */
  cleanup(): void {
    const now = Date.now();
    const maxAge = 5 * 60 * 1000; // 5 minutos
    
    for (const [key, entry] of this.logs.entries()) {
      if (now - entry.lastLogged > maxAge) {
        this.logs.delete(key);
      }
    }
  }

  /**
   * Log for√ßado que ignora throttling (usar apenas para erros cr√≠ticos)
   */
  forceLog(message: string, ...args: any[]): void {
    console.log(message, ...args);
  }
}

// AIDEV-NOTE: Inst√¢ncia global com throttle de 10 segundos (aumentado de 2s)
export const logThrottle = new LogThrottle(10000);

// AIDEV-NOTE: Cleanup autom√°tico a cada 5 minutos
if (typeof window !== 'undefined') {
  setInterval(() => {
    logThrottle.cleanup();
  }, 5 * 60 * 1000);
}

// Fun√ß√µes de conveni√™ncia com throttling otimizado
export const throttledAudit = (key: string, message: string, data?: any) => 
  logThrottle.audit(key, message, data);

export const throttledDebug = (key: string, message: string, data?: any) => 
  logThrottle.debug(key, message, data);

export const throttledTenantGuard = (key: string, message: string, data?: any) => 
  logThrottle.tenantGuard(key, message, data);

export const throttledAutoSelect = (key: string, message: string, data?: any) => 
  logThrottle.autoSelect(key, message, data);